# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master,feature/* ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python 
        with:
          pyrhon-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build
      - name: Build package
        run: python -m build
      
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      - name: Unit tests
        uses: actions/setup-python@v2.2.2

      - run: python my-unittest.py
      - run: coverage run my-unittest.py
      - run: python my-unittest2.py
      - run: coverage run my-unittest2.py
      - run: python my-unittest3.py
      - run: coverage run my-unittest3.py
      - run: python my-unittest4.py
      - run: coverage run my-unittest4.py
      
      - run: behave tests/Integracion
      
  deployDev:
    runs-on: ubuntu-latest
    
    needs: build
    
    steps:
      - uses: actions/checkout@v2
      - name: Heroku Deploy
        # You may pin to the exact commit or the version.
        # uses: lucassarcanjo/heroku-deploy@1db4c62f6032efe526c12734f18d36669218e5af
        uses: mtsmachado8/heroku-deploy@v2.0.3
        with:
          # Email Linked to your Heroku Account
          email: ${{secrets.EMAIL}}
          # Your Heroku API Key
          api_key: ${{secrets.HEROKU_API_TOKEN}}
          # Your Heroku App Name
          app_name: ${{secrets.APP_NAME}}

    
  testAPIDev:
    runs-on: ubuntu-latest
    
    needs: deployDev 
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: TestDev
      # You may pin to the exact commit or the version.
      # uses: matt-ball/newman-action@0659e9b8d056c0d03d94e1dbfce380512088b566
        uses: anthonyvscode/newman-action@v1.1
        with:
          # Postman API key
          apiKey: ${{secrets.POSTMAN_API_KEY}}
          # Collection to use
          collection: tests/postman/postmancollection.json
          # Environment to use
          environment: tests/postman/environments/development.json
          # Path to CSV or JSON data file
          iterationData: tests/postman/calc-test-data.csv
      
name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  build:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"Eduardo0507_prueba" /o:"eduardo0507" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
          <your clean build command>
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"



